# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:24:41+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    BaseSecurity,
    UnsuportedSecurityStub,
)

from models import CertificateRequest

app = MCPProxy(
    contact={
        'name': 'Co-WIN by Ministry of Health and Family Welfare',
        'url': 'https://www.cowin.gov.in',
    },
    description='API to get Co-WIN vaccination certificate.',
    termsOfService='https://www.cowin.gov.in/terms-condition',
    title='Co-WIN Certificate API',
    version='1.0.0',
    servers=[{'url': 'https://cowin.gov.cin/cert/external'}],
)


@app.post(
    '/pdf/certificate',
    tags=['certificate_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_certificate_pdf(body: CertificateRequest):
    """
    Download the certificate in pdf format
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
